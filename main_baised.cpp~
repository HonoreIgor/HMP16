#include <stdio.h>
#include <stdlib.h>    
#include <iostream>
#include <fstream>
#include <math.h>
#include <string>
#include <sstream>

#include "BLineaire.h"
#include "Sinus.h"
#include "Gaussian.h"
#include "Constant.h"
#include "DeuxX.h"
#include "Bernoulli.h"
#include "XBeta.h"
#include "Quantification.h"
#include "Density.h"
#include "Diffusion1d.h"
#include "Cosinus.h"

#define _USE_MATH_DEFINES
# define M_PI           3.14159265358979323846  /* pi */

using namespace std;

int main()
{
	ofstream fresult("result.data", ios::out);
	ofstream fresult_Gn("result_Gn.data", ios::out);
	ofstream fresult_corrected("result_corrected.data", ios::out);
	ofstream fgamma0("gamma0.data", ios::out);
	ofstream fm_theo("m_theo.data", ios::out);
	ofstream fsigma_theo("sigma_theo.data", ios::out);
	ofstream fa_n("a_n.data", ios::out);
	
	//Parameters
	double beta=0.5;// phi is beta-Lipschitz
	double theta=1.0/double(2.0+beta);// gamma_n= n^{-theta}
	int d=1;// diffusion dimension
	int r=1;// innovation diffusion
	int n=pow(10,1);// number of diffusion loops
	int MC=2; // number of Monte-Carlo loops
	int M=30;// number of quantization in computation of temp_dens_Gn and temp_dens_corrected, becareful the complexity is in M^2
	int M_U=1;// number of points of the quantized random
	
	// initialization
	double temp_dens;
	double temp_dens_Gn, temp_dens_corrected;
	double m_theo, sigma_theo, gam, a_n=0;
	double gamma_0;
	int i=0;
	double X0;
	double Gamma;
	a_n=0;
	gam=0;
	m_theo=0;
	sigma_theo=0;
	
	//diffusion functions
	BLineaire b;
		//Constant sigma;
	Cosinus sigma;
	// test function
	//XBeta phi(beta);
	Sinus phi;
	// random variables
	Bernoulli U;
	Bernoulli U_0;
	Gaussian U_final;
	Quantification UM(M_U,r);
	Quantification T1(M);
	Quantification T2(M);
	
	Gamma=0;
	for (i = 1; i < n + 1; i++)
		Gamma = Gamma + pow(double(i), -theta);
	
	Density dens(Gamma);

	// \tilde gamma=: gam=Gamma_n^{(3+beta)/2)}/\sqrt{Gamma_n}	
	gam=0;
	for(i=1;i<n+1;i++)
		gam+=pow(i,-(3.0+beta)*0.5*theta);
	gam/=sqrt(Gamma);
	
	//computing of the theoretical moments
	dens.set_moments(MC, M_U ,Gamma, beta, U_final, phi,b ,sigma, UM);
	m_theo=dens.get_m();
	m_theo*=gam;
	sigma_theo=dens.get_sigma();
	fsigma_theo<<sigma_theo;
	fsigma_theo.close();
	
	//optimization in gamma_0 
	gamma_0=pow(sigma_theo/(m_theo*m_theo*(1.+beta)), 1./(2.+beta));
	fgamma0<<gamma_0<<endl;
	fgamma0.close();
	Gamma*=gamma_0;
	gam*=pow(gamma_0, (2.+beta)*0.5);
	///////////////////////////////////////m_theo*=pow(gamma_0, (2.+beta)*0.5);
	fm_theo<<m_theo;
	fm_theo.close();
	
	// maximazation of the mean
	a_n=dens.get_an();
	a_n/=MC;
	a_n*=gam*pow(sigma.get_value(0.0),(3.0+beta))*sqrt(2);
	fa_n<<a_n<<endl;
	fa_n.close();
	
	Diffusion1d X(theta, n, b, sigma, U, M_U, UM,  T1, T2, gamma_0);
	
	for(i=0; i< MC; i++)
	{
		X0=U_0.get_value();
		// nu(A phi)
		temp_dens=X.Run_measure(X0, phi);
				
		//nu(Aphi) + E_n^1
		temp_dens_Gn=X.Run_measure_Gn(X0, phi);
		
		//nu(Aphi) + E_n
		temp_dens_corrected=X.Run_measure_corrected(X0, phi);
		
		fresult<<temp_dens<<endl;
		fresult_Gn<<temp_dens_Gn<<endl;
		fresult_corrected<<temp_dens_corrected<<endl;
	}
	fresult.close();
	fresult_Gn.close();
	fresult_corrected.close();
	return 0;
}
